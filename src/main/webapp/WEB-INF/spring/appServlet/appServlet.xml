<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
             xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <!-- DispatcherServlet Context: defines this servlet's request-processing
        infrastructure -->

    <!-- Enables the Spring MVC @Controller programming model -->
    <annotation-driven />
    <resources mapping="/static/**" location="/WEB-INF/resources/static/" />

    <!-- Handles HTTP GET requests for /resources/** by efficiently serving
        up static resources in the ${webappRoot}/resources directory -->
    <resources mapping="/resources/**" location="/WEB-INF/resources/" />

    <beans:bean id="multipartResolver"
            class="org.springframework.web.multipart.commons.CommonsMultipartResolver">

        <!-- setting maximum upload size -->
        <beans:property name="maxUploadSize" value="500000000" />

    </beans:bean>

    <!-- Resolves views selected for rendering by @Controllers to .jsp resources
            in the /WEB-INF/views directory
            -->
    <beans:bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <beans:property name="prefix" value="/WEB-INF/views/jsp/" />
        <beans:property name="suffix" value=".jsp" />
    </beans:bean>

    <!--
    <beans:bean id="velocityConfig"
          class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <beans:property name="resourceLoaderPath" value="/WEB-INF/views/velocity/" />
    </beans:bean>

    <beans:bean id="viewResolver"
          class="org.springframework.web.servlet.view.velocity.VelocityLayoutViewResolver">
        <beans:property name="cache" value="true" />
        <beans:property name="prefix" value="" />
        <beans:property name="layoutUrl" value="layouts/layout.vm" />
        <beans:property name="suffix" value=".vm" />
    </beans:bean>
    -->

    <beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
                destroy-method="close">
        <beans:property name="driverClassName" value="org.postgresql.Driver" />
        <beans:property name="url"
                        value="jdbc:postgresql://localhost:5432/tires" />
        <beans:property name="username" value="postgres" />
        <beans:property name="password" value="qwe" />
    </beans:bean>

    <!-- Hibernate 4 SessionFactory Bean definition -->
    <beans:bean id="hibernate4AnnotatedSessionFactory"
                class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <beans:property name="dataSource" ref="dataSource" />
        <beans:property name="annotatedClasses">
            <beans:list>
                <beans:value>ru.batmen.red.mvcapp.model.Manufactorer</beans:value>
                <beans:value>ru.batmen.red.mvcapp.model.Product</beans:value>
                <beans:value>ru.batmen.red.mvcapp.model.BannerImage</beans:value>
            </beans:list>
        </beans:property>
        <beans:property name="hibernateProperties">
            <beans:props>
                <beans:prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQL9Dialect</beans:prop>
                <beans:prop key="hibernate.show_sql">true</beans:prop>
                <beans:prop key="current_session_context_class">thread</beans:prop>
                <!--<beans:prop key="hbm2ddl.auto">update</beans:prop>-->
            </beans:props>
        </beans:property>
    </beans:bean>

    <beans:bean id="ManufactoreDao" class="ru.batmen.red.mvcapp.dao.ManufactorerDaoImpl">
        <beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </beans:bean>
    <beans:bean id="ManufactorerService" class="ru.batmen.red.mvcapp.service.ManufactorerServiceImpl">
        <beans:property name="manufactorerDaoImpl" ref="ManufactoreDao"></beans:property>
    </beans:bean>

    <beans:bean id="BannerImageDao" class="ru.batmen.red.mvcapp.dao.BannerImageDaoImpl">
        <beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </beans:bean>
    <beans:bean id="BannerImageService" class="ru.batmen.red.mvcapp.service.BannerImageServiceImpl">
        <beans:property name="bannerImageDaoImpl" ref="BannerImageDao"></beans:property>
    </beans:bean>

    <beans:bean id="ProductDao" class="ru.batmen.red.mvcapp.dao.ProductDaoImpl">
        <beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </beans:bean>
    <beans:bean id="ProductService" class="ru.batmen.red.mvcapp.service.ProductServiceImpl">
        <beans:property name="productDaoImpl" ref="ProductDao"></beans:property>
    </beans:bean>

    <context:component-scan base-package="ru.batmen.red.mvcapp" />

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
    </beans:bean>

</beans:beans>
